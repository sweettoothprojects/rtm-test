name: Octopus deploy

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch: {}
  # Run automatically after the CI workflow completes successfully on the main branch
  workflow_run:
    workflows: ["RTM Sample App CI"]
    types:
      - completed

jobs:
  create-release:
    runs-on: ubuntu-latest
    # Only run this job automatically when the triggering workflow (CI) completed successfully
    # For manual workflow_dispatch this job will still run.
    if: github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    env:
      # Prefer repository secrets. Set these in GitHub: Settings > Secrets
      IMAGE_TAG_INPUT: ${{ secrets.REPO_IMAGE_TAG }}
      ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      ECR_ACCOUNT_ID: ${{ secrets.ECR_ACCOUNT_ID }}
      # Octopus project slug configurable via repo variable (set in Settings > Variables)
      OCTOPUS_PROJECT_SLUG: ${{ vars.OCTOPUS_PROJECT_SLUG }}
      # Control whether the workflow will pack & push a package to Octopus (set to 'true' to enable)
      OCTOPUS_PUSH_PACKAGE: ${{ vars.OCTOPUS_PUSH_PACKAGE }}
      # Expose GitHub context into env variables for shell steps
      GITHUB_SHA: ${{ github.sha }}
      GITHUB_REF: ${{ github.ref }}
      GITHUB_RUN_ID: ${{ github.run_id }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download Octopus payload from CI
        uses: actions/download-artifact@v4
        with:
          name: octopus-payload
          path: ${{ github.workspace }}

      - name: Load payload metadata
        id: load-payload
        run: |
          set -euo pipefail
          if [ ! -f "$GITHUB_WORKSPACE/octopus_payload.json" ]; then
            echo "ERROR: expected octopus_payload.json artifact to be present (uploaded by CI)." >&2
            exit 1
          fi
          # Read JSON fields using a tiny jq invocation if available, otherwise use grep/awk
          if command -v jq >/dev/null 2>&1; then
            PACKAGE_ID=$(jq -r '.package_id // empty' "$GITHUB_WORKSPACE/octopus_payload.json")
            VERSION=$(jq -r '.Version // empty' "$GITHUB_WORKSPACE/octopus_payload.json")
          else
            PACKAGE_ID=$(grep -o '"package_id"[[:space:]]*:[[:space:]]*"[^"]\+"' "$GITHUB_WORKSPACE/octopus_payload.json" | sed -E 's/.*:"([^"]+)"/\1/') || true
            VERSION=$(grep -o '"Version"[[:space:]]*:[[:space:]]*"[^"]\+"' "$GITHUB_WORKSPACE/octopus_payload.json" | sed -E 's/.*:"([^"]+)"/\1/') || true
          fi
          echo "package_id=${PACKAGE_ID}" >> $GITHUB_OUTPUT
          echo "payload_version=${VERSION}" >> $GITHUB_OUTPUT

      - name: Download build-info from CI
        uses: actions/download-artifact@v4
        with:
          name: build-info
          path: ${{ github.workspace }}

      - name: Load build-info
        id: load-build-info
        run: |
          set -euo pipefail
          if [ ! -f "$GITHUB_WORKSPACE/build-info.json" ]; then
            echo "ERROR: expected build-info.json artifact to be present (uploaded by CI)." >&2
            exit 1
          fi
          if command -v jq >/dev/null 2>&1; then
            PROJECT_VERSION=$(jq -r '.projectVersion // empty' "$GITHUB_WORKSPACE/build-info.json")
            APPEND_VERSION=$(jq -r '.appendVersion // empty' "$GITHUB_WORKSPACE/build-info.json")
            SHA=$(jq -r '.sha // empty' "$GITHUB_WORKSPACE/build-info.json")
          else
            PROJECT_VERSION=$(grep -o '"projectVersion"[[:space:]]*:[[:space:]]*"[^"]\+"' "$GITHUB_WORKSPACE/build-info.json" | sed -E 's/.*:"([^"]+)"/\1/') || true
            APPEND_VERSION=$(grep -o '"appendVersion"[[:space:]]*:[[:space:]]*"[^"]\+"' "$GITHUB_WORKSPACE/build-info.json" | sed -E 's/.*:"([^"]+)"/\1/') || true
            SHA=$(grep -o '"sha"[[:space:]]*:[[:space:]]*"[^"]\+"' "$GITHUB_WORKSPACE/build-info.json" | sed -E 's/.*:"([^"]+)"/\1/') || true
          fi
          echo "PROJECT_VERSION=${PROJECT_VERSION}" >> $GITHUB_ENV
          echo "APPEND_VERSION=${APPEND_VERSION}" >> $GITHUB_ENV
          echo "IMAGE_SHA=${SHA}" >> $GITHUB_ENV
          echo "build_project_version=${PROJECT_VERSION}" >> $GITHUB_OUTPUT
          echo "build_append_version=${APPEND_VERSION}" >> $GITHUB_OUTPUT
          echo "build_sha=${SHA}" >> $GITHUB_OUTPUT

      - name: Package
        uses: OctopusDeploy/create-zip-package-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          package_id: ${{ steps.load-payload.outputs.package_id }}
          package_version: ${{ steps.load-payload.outputs.payload_version }}
          source_path: ${{ env.GITHUB_WORKSPACE }}
          output_folder: ${{ env.GITHUB_WORKSPACE }}/artifacts

      - name: Push Build Information
        uses: OctopusDeploy/push-build-information-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          project: ${{ vars.OCTOPUS_PROJECT_SLUG }}
          version: ${{ steps.load-payload.outputs.payload_version }}

      - name: Create a release in Octopus Deploy
        id: create-release
        uses: OctopusDeploy/create-release-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          project: ${{ vars.OCTOPUS_PROJECT_SLUG }}
          release_number: ${{ steps.load-payload.outputs.payload_version }}

      - name: Deploy release to Development
        id: deploy-release-to-development
        uses: OctopusDeploy/deploy-release-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          project: ${{ vars.OCTOPUS_PROJECT_SLUG }}
          release_number: ${{ steps.load-payload.outputs.payload_version }}
          environments: "Development"
