name: Octopus deploy

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch: {}
  # Run automatically after the CI workflow completes successfully on the main branch
  workflow_run:
    workflows: ["RTM Sample App CI"]
    types:
      - completed

jobs:
  create-release:
    runs-on: ubuntu-latest
    # Only run this job automatically when the triggering workflow (CI) completed successfully
    # For manual workflow_dispatch this job will still run.
    if: github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    env:
      # Octopus project slug configurable via repo variable (set in Settings > Variables)
      OCTOPUS_PROJECT_SLUG: ${{ secrets.OCTOPUS_PROJECT_SLUG }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download artifact from triggering CI run
        if: github.event_name == 'workflow_run'
        uses: actions/download-artifact@v5
        with:
          name: octopus-payload
          # Run id of the triggering workflow_run event
          run-id: ${{ github.event.workflow_run.id }}
          path: octopus-payload
          repository: ${{ github.repository }}
          github-token: ${{ secrets.RTM_TEST }}

      - name: Read octopus payload file
        id: read-payload
        uses: guibranco/github-file-reader-action-v2@v2.2.854
        with:
          path: ${{ github.workspace }}/octopus-payload/octopus_payload.json

      - name: File contents
        run: echo "${{ steps.read-payload.outputs.contents }}"

      - name: Extract Maven coordinates
        run: |
          set -euo pipefail
          ARTIFACT_ID=$(./mvnw help:evaluate -Dexpression=project.artifactId -q -DforceStdout || true)
          PROJECT_VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout || true)
          echo "PACKAGE_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "PAYLOAD_VERSION=$PROJECT_VERSION" >> $GITHUB_ENV

      - name: Create a Zip package
        uses: OctopusDeploy/create-zip-package-action@v3
        with:
          package_id: ${{ env.PACKAGE_ID }}
          version: ${{ env.PAYLOAD_VERSION }}
          output_folder: ${{ github.workspace }}/artifacts
          base_path: ${{ github.workspace }}/octopus-payload
          files: '**/*'

      - name: Push Build Information
        uses: OctopusDeploy/push-build-information-action@v3
        env:
          OCTOPUS_URL: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE }}
        with:
          packages: |
            ${{ env.PACKAGE_ID }}
          version: ${{ env.PAYLOAD_VERSION }}
          overwrite_mode: IgnoreIfExists

      - name: Create a release in Octopus Deploy
        id: create-release
        uses: OctopusDeploy/create-release-action@v2
        env:
          OCTOPUS_URL: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          OCTOPUS_SPACE: ${{ vars.OCTOPUS_SPACE }}
        with:
          project: ${{ secrets.OCTOPUS_PROJECT_SLUG }}

      - name: Deploy release to Development
        id: deploy-release-to-development
        uses: OctopusDeploy/deploy-release-action@v3
        env:
          OCTOPUS_URL: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        with:
          server: ${{ env.OCTOPUS_URL }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          project: ${{ secrets.OCTOPUS_PROJECT_SLUG }}
          release_number: ${{ env.PAYLOAD_VERSION }}
          environments: "Development"
