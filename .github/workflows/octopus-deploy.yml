name: Octopus deploy

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch: {}
  # Run automatically after the CI workflow completes successfully on the main branch
  workflow_run:
    workflows: ["RTM Sample App CI"]
    types:
      - completed

jobs:
  create-release:
    runs-on: ubuntu-latest
    # Only run this job automatically when the triggering workflow (CI) completed successfully
    # For manual workflow_dispatch this job will still run.
    if: github.event_name != 'workflow_run' || (github.event.workflow_run.conclusion == 'success' && github.event.workflow_run.head_branch == 'main')
    env:
      # Octopus project slug configurable via repo variable (set in Settings > Variables)
      OCTOPUS_PROJECT_SLUG: ${{ vars.OCTOPUS_PROJECT_SLUG }}
      # Control whether the workflow will pack & push a package to Octopus (set to 'true' to enable)
      OCTOPUS_PUSH_PACKAGE: ${{ vars.OCTOPUS_PUSH_PACKAGE }}
      # Expose GitHub context into env variables for shell steps

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download multiple artifacts from triggering CI run
        if: github.event_name == 'workflow_run'
        uses: marcofaggian/action-download-multiple-artifacts@v1
        with:
          names: octopus-payload
          paths: octopus-payload
          workflow: ci.yml
          workflow_conclusion: success
          repo: ${{ github.repository }}

      - name: Read octopus payload file
        id: read-payload
        uses: andstor/file-reader-action@v1
        with:
          path: ${{ github.workspace }}/octopus-payload/octopus_payload.json

      - name: File contents
        run: echo "${ steps.read-payload.outputs.contents }"

      - name: Package
        uses: OctopusDeploy/create-zip-package-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
          GITHUB_WORKSPACE: ${{ github.workspace }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          package_id: ${{ env.PACKAGE_ID }}
          package_version: ${{ env.PAYLOAD_VERSION }}
          source_path: ${{ env.GITHUB_WORKSPACE }}
          output_folder: ${{ env.GITHUB_WORKSPACE }}/artifacts

      - name: Push Build Information
        uses: OctopusDeploy/push-build-information-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          project: ${{ vars.OCTOPUS_PROJECT_SLUG }}
          version: ${{ env.PAYLOAD_VERSION }}

      - name: Create a release in Octopus Deploy
        id: create-release
        uses: OctopusDeploy/create-release-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          project: ${{ vars.OCTOPUS_PROJECT_SLUG }}
          release_number: ${{ env.PAYLOAD_VERSION }}

      - name: Deploy release to Development
        id: deploy-release-to-development
        uses: OctopusDeploy/deploy-release-action@v3
        env:
          OCTOPUS_SERVER: ${{ secrets.OCTOPUS_SERVER }}
          OCTOPUS_API_KEY: ${{ secrets.OCTOPUS_API_KEY }}
        with:
          server: ${{ env.OCTOPUS_SERVER }}
          api_key: ${{ env.OCTOPUS_API_KEY }}
          project: ${{ vars.OCTOPUS_PROJECT_SLUG }}
          release_number: ${{ env.PAYLOAD_VERSION }}
          environments: "Development"
